{
  "configVer": "2",
  "input": null,
  "output": null,
  "pipeline": null,
  "components": [
    {
      "componentInstance": "01-rdfstreamloader.yaml_0",
      "class": "RDFStreamLoader",
      "id": "0",
      "lang": "Turtle",
      "delimiter": "",
      "globalPrefixes": true,
      "split": true
    },
    {
      "componentInstance": "03-rdfupdater.yaml_1",
      "class": "RDFUpdater",
      "id": "1",
      "threads": "0",
      "lookahead": "0",
      "lookback": "0",
      "updates": [
        {
          "path": "updatePosTag.sparql" ,
          "iter": 1
        }
      ]
    },
  	{
  	  "componentInstance" : "duplicateTarqlResults",
  	  "class" : "IOStreamDuplicator"
  	},
    {
      "componentInstance": "04-rdfstreamwriter.yaml_2",
      "class": "RDFStreamWriter",
      "id": "2",
      "lang": "Turtle",
      "delimiter": null,
      "prefixDeduplication": true
    },
    {
      "componentInstance": "07-tarqltransformer.yaml_5",
      "class": "TarqlStreamTransformer",
      "id": "5",
      "query" : "mapping.tarql",
      "delimiterCSV": ",",
      "tabs": "no",
      "quoteChar": null,
      "escapeChar": null,
      "encoding": "UTF-8",
      "headerRow": true,
      "baseIRI": null,
      "write-base": null,
      "dedup": "0"
    },
    {
      "componentInstance": "01-rdfstreamloader.yaml_6",
      "class": "RDFStreamLoader",
      "id": "6",
      "lang": "Turtle",
      "delimiter": "",
      "globalPrefixes": true
    }
  ],
  "streams": [
    // Stream 1
    // Read input file
    {
      "readsFromSource": "SqlQueries/lexis_lexical_entries_new.ttl",
      "writesToInstance": "01-rdfstreamloader.yaml_0",
      "writesToInstanceGraph": ""
    },
    // Load input to updater
    {
      "readsFromInstance": "01-rdfstreamloader.yaml_0",
      "readsFromInstanceGraph": "",
      "writesToInstance": "03-rdfupdater.yaml_1",
      "writesToInstanceGraph": ""
    },
    // Stream 2
    // Read Mapping file in transformer
    {
      "readsFromSource": "gramcat.csv",
      "writesToInstance": "07-tarqltransformer.yaml_5",
      "writesToInstanceGraph": ""
    },
    // Load the transformated mapping file into segGraph
    {
      "readsFromInstance": "07-tarqltransformer.yaml_5",
      "readsFromInstanceGraph": "",
      "writesToInstance": "duplicateTarqlResults",
      "writesToInstanceGraph": ""
    },

    {
      "readsFromInstance": "duplicateTarqlResults",
      "readsFromInstanceGraph": "",
      "writesToInstance": "01-rdfstreamloader.yaml_6",
      "writesToInstanceGraph": ""
    },
    // Export Output file of transformed Mapping
    {
      "readsFromInstance": "duplicateTarqlResults",
      "readsFromInstanceGraph": "",
      "writesToDestination": "LexisFinalRDF/exportedMapping.ttl"
    },
    // Lading segmented Graph to Updater
    {
      "readsFromInstance": "01-rdfstreamloader.yaml_6",
      "readsFromInstanceGraph": "",
      "writesToInstance": "03-rdfupdater.yaml_1",
      "writesToInstanceGraph": "http://mapping"
    },
    //from here the streams are merged
    {
      "readsFromInstance": "03-rdfupdater.yaml_1",
      "readsFromInstanceGraph": "",
      "writesToInstance": "04-rdfstreamwriter.yaml_2",
      "writesToInstanceGraph": ""
    },
    // Export Output file
    {
      "readsFromInstance": "04-rdfstreamwriter.yaml_2",
      "readsFromInstanceGraph": "",
      "writesToDestination": "LexisFinalRDF/lexis.ttl"
    }
  ]
}
